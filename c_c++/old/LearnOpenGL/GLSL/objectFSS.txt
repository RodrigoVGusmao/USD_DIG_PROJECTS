#version 420 core

#define NR_POINT_LIGHTS 4

struct Material {
	sampler2D diffuse;
	sampler2D specular;
	float shininess;
};

struct DirectionLight {
	vec3 direction;

	vec3 ambient;
	vec3 diffuse;
	vec3 specular;
};
struct PointLight {
	vec3 position;

	float linear;
	float quadratic;

	vec3 ambient;
	vec3 diffuse;
	vec3 specular;
};
struct SpotLight {
	vec3 position;
	vec3 direction;
	
	float linear;
	float quadratic;
	float cutOff;
	float outerCutOff;

	vec3 ambient;
	vec3 diffuse;
	vec3 specular;
};

in vec3 fragPos;
in vec3 normal;
in vec2 texCoords;

out vec4 fragColor;

uniform vec3 viewPos;
uniform Material obj;
uniform DirectionLight dir;
uniform PointLight point[NR_POINT_LIGHTS];
uniform SpotLight spot;

vec3 dirLight(DirectionLight light, vec3 normNormal, vec3 viewDir);
vec3 pointLight(PointLight light, vec3 normNormal, vec3 fragPos, vec3 viewDir);
vec3 spotLight(SpotLight light, vec3 normNormal, vec3 fragPos, vec3 viewDir);

void main()
{
	vec3 normNormal = normalize(normal);
	vec3 viewDir = normalize(viewPos - fragPos);
	
	vec3 result = dirLight(dir, normNormal, viewDir);

	for(int i = 0; i < NR_POINT_LIGHTS; i++)
	{
		result += pointLight(point[i], normNormal, fragPos, viewDir);
	}
	
	result += spotLight(spot, normNormal, fragPos, viewDir);

	fragColor = vec4(result, 1.0f);
}

vec3 dirLight(DirectionLight light, vec3 normNormal, vec3 viewDir)
{
	vec3 ambient = light.ambient * vec3(texture(obj.diffuse, texCoords));

	vec3 lightDir = normalize(-light.direction);
	float diff = max(dot(normNormal, lightDir), 0.0f);
	vec3 diffuse = light.diffuse * diff * vec3(texture(obj.diffuse, texCoords));

	vec3 reflectDir = reflect(-lightDir, normNormal);
	float spec = pow(max(dot(viewDir, reflectDir), 0.0f), obj.shininess);
	vec3 specular = light.specular * spec * vec3(texture(obj.specular, texCoords));

	return (ambient + diffuse + specular);
}

vec3 pointLight(PointLight light, vec3 normNormal, vec3 fragPos, vec3 viewDir)
{
	float distance = length(light.position - fragPos);
	float attenuation = 1/(1.0f + light.linear*distance + light.quadratic*distance*distance);

	vec3 ambient = light.ambient * vec3(texture(obj.diffuse, texCoords));
	
	vec3 lightDir = normalize(light.position - fragPos);
	float diff = max(dot(normNormal, lightDir), 0.0f);
	vec3 diffuse = light.diffuse * diff * vec3(texture(obj.diffuse, texCoords));
	
	vec3 reflectDir = reflect(-lightDir, normNormal);
	float spec = pow(max(dot(viewDir, reflectDir), 0.0f), obj.shininess);
	vec3 specular = light.specular * spec * vec3(texture(obj.specular, texCoords));

	return ((ambient + diffuse + specular)*attenuation);
}

vec3 spotLight(SpotLight light, vec3 normNormal, vec3 fragPos, vec3 viewDir)
{
	float distance = length(light.position - fragPos);
	float attenuation = 1/(1.0f + light.linear*distance + light.quadratic*distance*distance);

	vec3 ambient = light.ambient * vec3(texture(obj.diffuse, texCoords));
	
	vec3 lightDir = normalize(light.position - fragPos);
	float diff = max(dot(normNormal, lightDir), 0.0f);
	vec3 diffuse = light.diffuse * diff * vec3(texture(obj.diffuse, texCoords));
	
	vec3 reflectDir = reflect(-lightDir, normNormal);
	float spec = pow(max(dot(viewDir, reflectDir), 0.0f), obj.shininess);
	vec3 specular = light.specular * spec * vec3(texture(obj.specular, texCoords));

	float theta = dot(lightDir, normalize(-light.direction));
	float intensity = clamp((theta - light.outerCutOff)/(light.cutOff - light.outerCutOff), 0.0f, 1.0f);

	return ((ambient + diffuse + specular)*attenuation*intensity);
}